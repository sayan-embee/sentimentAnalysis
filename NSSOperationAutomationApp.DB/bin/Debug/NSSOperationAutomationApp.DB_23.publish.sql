/*
Deployment script for NSSOperationAutomationP1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NSSOperationAutomationP1"
:setvar DefaultFilePrefix "NSSOperationAutomationP1"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_T_CallDetails_InsertUpdate]...';


GO
ALTER PROCEDURE [dbo].[usp_T_CallDetails_InsertUpdate]
(
	@TransactionType VARCHAR(10) = NULL,

	@CallDetailId BIGINT = 0,
	@AssignmentId BIGINT = NULL,
    @UpdatedBy VARCHAR(100) = NULL,
    @UpdatedByEmail VARCHAR(100) = NULL,
    @UpdatedByADID VARCHAR(50) = NULL,
    @CallActionId INT = NULL,
	@CallStatusId INT = NULL,
    @CustomerName VARCHAR(200) = NULL,
    @CaseNumber VARCHAR(50) = NULL,
    @UnitSlNo VARCHAR(50) = NULL,
    @PassId VARCHAR(50) = NULL,
    @TaskStartDateTimeIST DATETIME = NULL,
    @TaskEndDateTimeIST DATETIME = NULL,
    @CloserRemarks NVARCHAR(MAX) = NULL,
    @PartConsumptionTypeId INT = NULL,
    @SONo VARCHAR(50) = NULL,
    @RequiredPart NVARCHAR(MAX) = NULL,
    @RequiredSparePartNo VARCHAR(50) = NULL,
    @RequiredPartName VARCHAR(100) = NULL,
    @FaultyPartCTNo VARCHAR(50) = NULL,
    @FailureId VARCHAR(50) = NULL,
    @IssueDescription NVARCHAR(MAX) = NULL,
    @TroubleshootingStep NVARCHAR(MAX) = NULL,
    @FirstPartConsumptionTypeId INT = NULL,
    @FirstPartSONo VARCHAR(50) = NULL,
    @FirstRequiredPartName VARCHAR(100) = NULL,
    @ReceivedPartConsumptionTypeId INT = NULL,
    @ReceivedPartName VARCHAR(100) = NULL,	

	@udt_CallDocuments dbo.[udt_T_CallDocuments] READONLY
)
AS
BEGIN
	
	DECLARE @SuccessMsg VARCHAR(100);
	DECLARE @ErrorMsg VARCHAR(100);

	DECLARE @OutputTbl AS TABLE
	(
		[CaseNumber]		VARCHAR (50),
		[TicketId]			BIGINT,
		[CreatedOn]			VARCHAR(50),
		[AssignedBy]		NVARCHAR (100),
		[AssignedByEmail]	VARCHAR (100),
		[AssignedByADID]	VARCHAR (50),
		[AssignedTo]		NVARCHAR (100),
		[AssignedToEmail]	VARCHAR (100),
		[AssignedToADID]	VARCHAR (50),
		[AssignedOn]		VARCHAR(50),
		[ServiceAccount]    VARCHAR (100),
		[CallStatus]		VARCHAR (100),
		[AssignmentId]		BIGINT,
		[AssignmentHistoryId]	BIGINT,
		[CallDetailId]      BIGINT,
		[CallAction]		VARCHAR (50),
		[UpdatedOn]			VARCHAR(50),
		[UpdatedBy]			VARCHAR(100),
		[UpdatedByEmail]	VARCHAR(100),
		[UpdatedByADID]		VARCHAR(50),
		[CloserRemarks]		NVARCHAR(MAX),
		[AdminClosureRemarks] NVARCHAR(MAX)
	);

	DECLARE @JSONString NVARCHAR(MAX) = NULL;

	IF EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.AssignmentId = @AssignmentId AND A.CaseNumber = @CaseNumber AND A.CallStatusId = 3)
	BEGIN
		SET @ErrorMsg = 'DB execution failed - CaseNumber with this AssignmentId is already closed';
		SELECT
			@ErrorMsg												AS [Message],
			''														AS ErrorMessage,
			0					                                    AS [Status],
			@AssignmentId				                            AS Id
			RETURN
	END


	IF(@TransactionType = 'CALL-I')
	BEGIN
	BEGIN TRY
	-----------------	

	BEGIN TRANSACTION
	-----------------

		INSERT INTO dbo.[T_CallDetails]
		(
			AssignmentId,
			UpdatedBy,
			UpdatedByEmail,
			UpdatedByADID,
			UpdatedOnUTC,
			CallActionId,
			CustomerName,
			CaseNumber,
			UnitSlNo,
			PassId,
			TaskStartDateTimeIST,
			TaskEndDateTimeIST,
			CloserRemarks,
			PartConsumptionTypeId,
			SONo,
			RequiredPart,
			RequiredSparePartNo,
			RequiredPartName,
			FaultyPartCTNo,
			FailureId,
			IssueDescription,
			TroubleshootingStep,
			FirstPartConsumptionTypeId,
			FirstPartSONo,
			FirstRequiredPartName,
			ReceivedPartConsumptionTypeId,
			ReceivedPartName
		)
		VALUES
		(
			@AssignmentId,
			@UpdatedBy,
			@UpdatedByEmail,
			@UpdatedByADID,
			GETUTCDATE(),
			@CallActionId,
			@CustomerName,
			@CaseNumber,
			@UnitSlNo,
			@PassId,
			@TaskStartDateTimeIST,
			@TaskEndDateTimeIST,
			@CloserRemarks,
			@PartConsumptionTypeId,
			@SONo,
			@RequiredPart,
			@RequiredSparePartNo,
			@RequiredPartName,
			@FaultyPartCTNo,
			@FailureId,
			@IssueDescription,
			@TroubleshootingStep,
			@FirstPartConsumptionTypeId,
			@FirstPartSONo,
			@FirstRequiredPartName,
			@ReceivedPartConsumptionTypeId,
			@ReceivedPartName
		);

		SET @CallDetailId = @@IDENTITY;

		IF(@CallDetailId > 0)
		BEGIN

			UPDATE dbo.[T_EngineerAssignment]
			SET CallActionId = ISNULL(@CallActionId, CallActionId),
			CallStatusId = ISNULL(@CallStatusId, CallStatusId)
			WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;

			IF(@CallActionId = 1 AND @CallStatusId = 3)
			BEGIN

				UPDATE dbo.[T_EngineerAssignment]
				SET ClosedBy = ISNULL(@UpdatedBy, ClosedBy),
				ClosedByEmail = ISNULL(@UpdatedByEmail, ClosedByEmail),
				ClosedByADID = ISNULL(@UpdatedByADID, ClosedByADID),
				ClosedOnUTC = GETUTCDATE()
				WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;


				SET @SuccessMsg = 'DB execution successful - CallDetails inserted';

			END

			IF EXISTS(SELECT * FROM @udt_CallDocuments CD)
			BEGIN

				INSERT INTO dbo.[T_CallDocuments]
				(
					CallDetailId,
					DocumentTypeId,
					DocumentName,
					MimeType,
					DocumentUrlPath,
					IsActive,
					InternalName,
					CreatedOnUCT
				)
				SELECT
					@CallDetailId,
					CD.DocumentTypeId,
					CD.DocumentName,
					CD.MimeType,
					CD.DocumentUrlPath,
					1,
					CD.InternalName,
					GETUTCDATE()
				FROM @udt_CallDocuments CD

				SET @SuccessMsg = 'DB execution successful - CallDetails & Documents inserted';

			END			

			INSERT INTO @OutputTbl
			SELECT
				TD.CaseNumber,
				TD.TicketId,
				--FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'yyyy-MM-dd HH:mm:ss') AS CreatedOn,
				FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS CreatedOn,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				--FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') AS AssignedOn,
				FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS AssignedOn,
				TD.ServiceAccount,
				CS.CallStatus,
				A.AssignmentId,
				AH.AssignmentHistoryId,
				CD.CallDetailId,
				CA.CallAction,
				FORMAT(SWITCHOFFSET(CD.UpdatedOnUTC, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS UpdatedOn,
				CD.UpdatedBy,
				CD.UpdatedByEmail,
				CD.UpdatedByADID,
				CD.CloserRemarks,
				A.AdminClosureRemarks
			FROM dbo.[T_CallDetails] CD WITH(NOLOCK)
			INNER JOIN dbo.[T_TicketDetails] TD WITH(NOLOCK) ON TD.CaseNumber = CD.CaseNumber
			INNER JOIN dbo.[T_EngineerAssignment] A WITH(NOLOCK) ON A.CaseNumber = TD.CaseNumber
			INNER JOIN dbo.[T_EngineerAssignmentHistory] AH WITH(NOLOCK) ON AH.AssignmentId = A.AssignmentId
			LEFT JOIN [dbo].[M_CallStatus] CS WITH(NOLOCK) ON CS.CallStatusId = A.CallStatusId
			LEFT JOIN dbo.[M_CallAction] CA WITH(NOLOCK) ON CA.CallActionId = CD.CallActionId
			WHERE CD.CallDetailId = @CallDetailId
			AND CD.CaseNumber = @CaseNumber
			AND CD.AssignmentId = @AssignmentId

			SET @JSONString = (
				SELECT 
					CaseNumber,
					TicketId,
					CreatedOn,
					AssignedBy,
					AssignedByEmail,
					AssignedByADID,
					AssignedTo,
					AssignedToEmail,
					AssignedToADID,
					AssignedOn,
					ServiceAccount,
					CallStatus,
					AssignmentId,
					AssignmentHistoryId,
					CallDetailId,
					CallAction,
					UpdatedBy,
					UpdatedByEmail,
					UpdatedByADID,
					CloserRemarks,
					AdminClosureRemarks
				FROM @OutputTbl
			FOR JSON AUTO
			);

		END
		

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Insert CallDetails';
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END

	--------------------------------------------------------------------------------

	IF(@TransactionType = 'CALL-U')
	BEGIN
	BEGIN TRY
	-----------------

	BEGIN TRANSACTION
	-----------------
		
		SET @SuccessMsg = 'DB execution successful - CallDetails updated';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Update CallDetails'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END	

	--------------------------------------------------------------------------------


	COMMIT TRANSACTION
	-----------------
	SELECT
		@SuccessMsg												AS [Message],
		''						                                AS ErrorMessage,
		1					                                    AS [Status],
		@CallDetailId											AS Id,
		@AssignmentId											AS ReferenceNo,
		@JSONString												AS ReferenceObject
	RETURN
END
GO
PRINT N'Altering Procedure [dbo].[usp_T_EngineerAssignment_InsertUpdate]...';


GO
ALTER PROCEDURE [dbo].[usp_T_EngineerAssignment_InsertUpdate]
(
	@TransactionType VARCHAR(10) = NULL,
	@TicketId BIGINT = NULL,
	@AssignmentId BIGINT = 0,
	@CaseNumber VARCHAR(50) = NULL,
    @AssignedTo NVARCHAR(100) = NULL,
    @AssignedToEmail VARCHAR(100) = NULL,
    @AssignedToADID VARCHAR(50) = NULL,
    @AssignedBy NVARCHAR(100) = NULL,
    @AssignedByEmail VARCHAR(100) = NULL,
    @AssignedByADID VARCHAR(50) = NULL,
    @CallActionId INT = NULL,
    @CallStatusId INT = NULL,
    @ClosedBy VARCHAR(100) = NULL,
    @ClosedByEmail VARCHAR(100) = NULL,
    @ClosedByADID VARCHAR(100) = NULL,
    @AdminClosureRemarks NVARCHAR(MAX) = NULL
)
AS
BEGIN
	
	DECLARE @AssignmentHistoryId BIGINT = 0;
	DECLARE @SuccessMsg VARCHAR(100);
	DECLARE @ErrorMsg VARCHAR(100);

	DECLARE @OutputTbl AS TABLE
	(
		[CaseNumber]		VARCHAR (50),
		[TicketId]			BIGINT,
		[CreatedOn]			VARCHAR(50),
		[AssignedBy]		NVARCHAR (100),
		[AssignedByEmail]	VARCHAR (100),
		[AssignedByADID]	VARCHAR (50),
		[AssignedTo]		NVARCHAR (100),
		[AssignedToEmail]	VARCHAR (100),
		[AssignedToADID]	VARCHAR (50),
		[AssignedOn]		VARCHAR(50),
		[ServiceAccount]    VARCHAR (100),
		[CallStatus]		VARCHAR (100),
		[AssignmentId]		BIGINT,
		[AssignmentHistoryId]	BIGINT
	);

	DECLARE @JSONString NVARCHAR(MAX) = NULL;


	IF(@TransactionType = 'ENG-I')
	BEGIN
	BEGIN TRY
	-----------------

	IF EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.CaseNumber = @CaseNumber AND A.CallStatusId <> 3)
	BEGIN
		SET @ErrorMsg = 'DB execution failed - CaseNumber already assigned'
		SELECT
			@ErrorMsg												AS [Message],
			''														AS ErrorMessage,
			0					                                    AS [Status],
			@AssignmentId				                            AS Id
			RETURN
	END

	BEGIN TRANSACTION
	-----------------

		INSERT INTO dbo.[T_EngineerAssignment]
		(
			CaseNumber,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallStatusId,
			CreatedOnUTC,
			AdminClosureRemarks
		)
		VALUES
		(
			@CaseNumber,
			@TicketId,
			@AssignedTo,
			@AssignedToEmail,
			@AssignedToADID,
			GETUTCDATE(),
			@AssignedBy,
			@AssignedByEmail,
			@AssignedByADID,
			1,
			GETUTCDATE(),
			@AdminClosureRemarks
		);

		SET @AssignmentId = @@IDENTITY;

		IF(@AssignmentId > 0)
		BEGIN

			INSERT INTO dbo.[T_EngineerAssignmentHistory]
			(
				AssignmentId,
				TicketId,
				AssignedTo,
				AssignedToEmail,
				AssignedToADID,
				AssignedOnUTC,
				AssignedBy,
				AssignedByEmail,
				AssignedByADID,
				CallActionId,
				CallStatusId,
				ClosedBy,
				ClosedByEmail,
				ClosedByADID,
				AdminClosureRemarks,
				CreatedOnUTC,
				CaseNumber
			)
			SELECT
				A.AssignmentId,
				A.TicketId,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				A.AssignedOnUTC,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.CallActionId,
				A.CallStatusId,
				A.ClosedBy,
				A.ClosedByEmail,
				A.ClosedByADID,
				A.AdminClosureRemarks,
				GETUTCDATE(),
				A.CaseNumber
			FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
			WHERE A.AssignmentId = @AssignmentId

			SET @AssignmentHistoryId = @@IDENTITY;

			UPDATE dbo.[T_TicketDetails] SET TicketId = @TicketId WHERE CaseNumber = @CaseNumber;			

			SET @SuccessMsg = 'DB execution successful - EngineerAssignment inserted';

			INSERT INTO @OutputTbl
			SELECT
				TD.CaseNumber,
				TD.TicketId,
				--FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'yyyy-MM-dd HH:mm:ss') AS CreatedOn,
				FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS CreatedOn,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				--FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') AS AssignedOn,
				FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS AssignedOn,
				TD.ServiceAccount,
				CS.CallStatus,
				A.AssignmentId,
				@AssignmentHistoryId AS AssignmentHistoryId
			FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
			INNER JOIN dbo.[T_TicketDetails] TD WITH(NOLOCK) ON TD.CaseNumber = A.CaseNumber
			LEFT JOIN [dbo].[M_CallStatus] CS WITH(NOLOCK) ON CS.CallStatusId = A.CallStatusId
			WHERE A.AssignmentId = @AssignmentId

			SET @JSONString = (
				SELECT 
					CaseNumber,
					TicketId,
					CreatedOn,
					AssignedBy,
					AssignedByEmail,
					AssignedByADID,
					AssignedTo,
					AssignedToEmail,
					AssignedToADID,
					AssignedOn,
					ServiceAccount,
					CallStatus,
					AssignmentId,
					AssignmentHistoryId
				FROM @OutputTbl
			FOR JSON AUTO
			);

		END		

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Insert EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END

	--------------------------------------------------------------------------------

	IF(@TransactionType = 'ENG-U')
	BEGIN
	BEGIN TRY
	-----------------

		IF NOT EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.AssignmentId = @AssignmentId)
		BEGIN
			SET @ErrorMsg = 'DB execution failed - AssignmentId does not exists'
			SELECT
				@ErrorMsg												AS [Message],
				''														AS ErrorMessage,
				0					                                    AS [Status],
				@AssignmentId				                            AS Id
				RETURN
		END

	BEGIN TRANSACTION
	-----------------

		UPDATE dbo.[T_EngineerAssignment]
		SET AssignedTo = ISNULL(@AssignedTo, AssignedTo),
		AssignedToEmail = ISNULL(@AssignedToEmail, AssignedToEmail),
		AssignedToADID = ISNULL(@AssignedToADID, AssignedToADID),
		AssignedOnUTC = GETUTCDATE(),
		AssignedBy = ISNULL(@AssignedBy, AssignedBy),
		AssignedByEmail = ISNULL(@AssignedByEmail, AssignedByEmail),
		AssignedByADID = ISNULL(@AssignedByADID, AssignedByADID),
		AdminClosureRemarks = ISNULL(@AdminClosureRemarks, AdminClosureRemarks)
		WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber AND CallStatusId <> 3


		INSERT INTO dbo.[T_EngineerAssignmentHistory]
		(
			AssignmentId,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallActionId,
			CallStatusId,
			ClosedBy,
			ClosedByEmail,
			ClosedByADID,
			AdminClosureRemarks,
			CreatedOnUTC,
			CaseNumber
		)
		SELECT
			A.AssignmentId,
			A.TicketId,
			A.AssignedTo,
			A.AssignedToEmail,
			A.AssignedToADID,
			A.AssignedOnUTC,
			A.AssignedBy,
			A.AssignedByEmail,
			A.AssignedByADID,
			A.CallActionId,
			A.CallStatusId,
			A.ClosedBy,
			A.ClosedByEmail,
			A.ClosedByADID,
			A.AdminClosureRemarks,
			GETUTCDATE(),
			A.CaseNumber
		FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
		WHERE A.AssignmentId = @AssignmentId;

		SET @AssignmentHistoryId = @@IDENTITY;	

		SET @SuccessMsg = 'DB execution successful - EngineerAssignment updated';

		INSERT INTO @OutputTbl
		SELECT
			TD.CaseNumber,
			TD.TicketId,
			--FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'yyyy-MM-dd HH:mm:ss') AS CreatedOn,
			FORMAT(SWITCHOFFSET(TD.CreatedOn, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS CreatedOn,
			A.AssignedBy,
			A.AssignedByEmail,
			A.AssignedByADID,
			A.AssignedTo,
			A.AssignedToEmail,
			A.AssignedToADID,
			--FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as AssignedOn,
			FORMAT(SWITCHOFFSET(A.AssignedOnUTC, '+05:30'),'dd-MM-yyyy HH:mm:ss') AS AssignedOn,
			TD.ServiceAccount,
			CS.CallStatus,
			A.AssignmentId,
			@AssignmentHistoryId AS AssignmentHistoryId
		FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
		INNER JOIN dbo.[T_TicketDetails] TD WITH(NOLOCK) ON TD.CaseNumber = A.CaseNumber
		LEFT JOIN [dbo].[M_CallStatus] CS WITH(NOLOCK) ON CS.CallStatusId = A.CallStatusId
		WHERE A.AssignmentId = @AssignmentId

		SET @JSONString = (
			SELECT 
				CaseNumber,
				TicketId,
				CreatedOn,
				AssignedBy,
				AssignedByEmail,
				AssignedByADID,
				AssignedTo,
				AssignedToEmail,
				AssignedToADID,
				AssignedOn,
				ServiceAccount,
				CallStatus,
				AssignmentId,
				AssignmentHistoryId
			FROM @OutputTbl
		FOR JSON AUTO
		);

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Update EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END
	
	--------------------------------------------------------------------------------

	IF(@TransactionType = 'ADMIN-U')
	BEGIN
	BEGIN TRY
	-----------------

		IF NOT EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.AssignmentId = @AssignmentId)
		BEGIN
			SET @ErrorMsg = 'DB execution failed - AssignmentId does not exists'
			SELECT
				@ErrorMsg												AS [Message],
				''														AS ErrorMessage,
				0					                                    AS [Status],
				@AssignmentId				                            AS Id
				RETURN
		END

	BEGIN TRANSACTION
	-----------------

		UPDATE dbo.[T_EngineerAssignment]
		SET CallStatusId = ISNULL(@CallStatusId, CallStatusId),
		AdminClosureRemarks = ISNULL(@AdminClosureRemarks, AdminClosureRemarks)
		WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;

		--IF(@CallActionId = 1 AND @CallStatusId = 3)
		IF(@CallStatusId = 3)
		BEGIN

			UPDATE dbo.[T_EngineerAssignment]
			SET ClosedBy = ISNULL(@ClosedBy, ClosedBy),
			ClosedByEmail = ISNULL(@ClosedByEmail, ClosedByEmail),
			ClosedByADID = ISNULL(@ClosedByADID, ClosedByADID),
			ClosedOnUTC = GETUTCDATE()
			WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;

		END
		
		SET @SuccessMsg = 'DB execution successful - EngineerAssignment updated by Admin';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Admin Update EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END


	COMMIT TRANSACTION
	-----------------
	SELECT
		@SuccessMsg												AS [Message],
		''						                                AS ErrorMessage,
		1					                                    AS [Status],
		@AssignmentId											AS Id,
		@CaseNumber												AS ReferenceNo,
		@JSONString												AS ReferenceObject
END
GO
PRINT N'Update complete.';


GO
