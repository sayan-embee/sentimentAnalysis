/*
Deployment script for NSSOperationAutomationP1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NSSOperationAutomationP1"
:setvar DefaultFilePrefix "NSSOperationAutomationP1"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Procedure [dbo].[usp_TicketInBulk_Insert]...';


GO
DROP PROCEDURE [dbo].[usp_TicketInBulk_Insert];


GO
PRINT N'Dropping User-Defined Table Type [dbo].[udt_T_TicketDetails]...';


GO
DROP TYPE [dbo].[udt_T_TicketDetails];


GO
PRINT N'Creating User-Defined Table Type [dbo].[udt_T_TicketDetails]...';


GO
CREATE TYPE [dbo].[udt_T_TicketDetails] AS TABLE (
    [CaseNumber]      VARCHAR (50)   NOT NULL,
    [TicketId]        BIGINT         NOT NULL,
    [CaseSubject]     NVARCHAR (500) NULL,
    [ContactName]     VARCHAR (100)  NULL,
    [ContactEmail]    VARCHAR (100)  NULL,
    [SerialNumber]    NVARCHAR (50)  NULL,
    [ProductName]     NVARCHAR (100) NULL,
    [ProductNumber]   VARCHAR (50)   NULL,
    [CreatedOn]       NVARCHAR (50)  NULL,
    [TicketType]      VARCHAR (10)   NULL,
    [AssignedTo]      NVARCHAR (100) NULL,
    [AssignedToEmail] VARCHAR (100)  NULL,
    [AssignedToADID]  VARCHAR (50)   NULL,
    [AssignedBy]      NVARCHAR (100) NULL,
    [AssignedByEmail] VARCHAR (100)  NULL,
    [AssignedByADID]  VARCHAR (50)   NULL);


GO
PRINT N'Altering Table [dbo].[T_EngineerAssignment]...';


GO
ALTER TABLE [dbo].[T_EngineerAssignment] ALTER COLUMN [AssignedBy] NVARCHAR (100) NULL;


GO
PRINT N'Altering Table [dbo].[T_EngineerAssignmentHistory]...';


GO
ALTER TABLE [dbo].[T_EngineerAssignmentHistory] ALTER COLUMN [AssignedBy] NVARCHAR (100) NULL;

ALTER TABLE [dbo].[T_EngineerAssignmentHistory] ALTER COLUMN [AssignedTo] NVARCHAR (100) NULL;


GO
PRINT N'Altering Procedure [dbo].[usp_T_EngineerAssignment_Get]...';


GO
ALTER PROCEDURE [dbo].[usp_T_EngineerAssignment_Get]
  (
	@AssignmentId BIGINT = NULL,
	@CaseNumber VARCHAR(50) = NULL,
	@TicketId BIGINT = NULL,
	@SerialNumber NVARCHAR(50) = NULL,
	@PartNumber NVARCHAR(100) = NULL,
	@FromDate VARCHAR(10) = NULL,
	@ToDate VARCHAR(10) = NULL,
	@AssignedTo NVARCHAR(100) = NULL,
	@AssignedToEmail VARCHAR(50) = NULL,
	@AssignedBy NVARCHAR(100) = NULL,
	@AssignedByEmail VARCHAR(50) = NULL,
	@CallStatusId INT = NULL,
	@CallActionId INT = NULL
  )
  AS
  BEGIN

		SELECT 
			[AssignmentId]
			,[CaseNumber]
			,[TicketId]
			,[AssignedTo]
			,[AssignedToEmail]
			,[AssignedToADID]
			--,[AssignedOnUTC]
			,FORMAT(SWITCHOFFSET(AssignedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as AssignedOnUTC
			,[AssignedBy]
			,[AssignedByEmail]
			,[AssignedByADID]
			,EA.[CallActionId]
			,CASE 
				WHEN EA.[CallActionId] IS NOT NULL THEN CA.CallAction
				ELSE 'Action Pending'
			 END AS 'CallAction'
			,EA.[CallStatusId]
			,CS.CallStatus
			,[ClosedBy]
			,[ClosedByEmail]
			--,[ClosedOnUTC]
			,FORMAT(SWITCHOFFSET(ClosedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as ClosedOnUTC
			,[AdminClosureRemarks]
			,[ClosedByADID]
			--,[CreatedOnUTC]
			,FORMAT(SWITCHOFFSET(CreatedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as CreatedOnUTC
		FROM [dbo].[T_EngineerAssignment] EA WITH(NOLOCK)

		INNER JOIN [dbo].[M_CallStatus] CS WITH(NOLOCK) ON CS.CallStatusId = EA.CallStatusId

		LEFT JOIN [dbo].[M_CallAction] CA WITH(NOLOCK) ON CA.CallActionId = EA.CallActionId		

		WHERE (@AssignmentId IS NULL OR EA.AssignmentId = @AssignmentId)
			AND (ISNULL(@CaseNumber,'')='' OR EA.CaseNumber LIKE @CaseNumber + '%')
			AND (@TicketId IS NULL OR EA.TicketId = @TicketId)
			AND (ISNULL(@AssignedTo,'')='' OR EA.AssignedTo LIKE @AssignedTo + '%')
			AND (ISNULL(@AssignedToEmail,'') = '' OR EA.AssignedToEmail = @AssignedToEmail)
			AND (ISNULL(@FromDate,'')= '' OR CONVERT(DATE, SWITCHOFFSET(EA.AssignedOnUTC, '+05:30')) >= CONVERT(DATE, @FromDate,103))
			AND (ISNULL(@ToDate ,'')= '' OR  CONVERT(DATE, SWITCHOFFSET(EA.AssignedOnUTC, '+05:30')) <= CONVERT(DATE, @ToDate,103))
		ORDER BY EA.AssignmentId DESC

		IF(@AssignmentId IS NOT NULL AND @AssignmentId > 0)
		BEGIN

			SELECT
				[AssignmentHistoryId]
				  ,[AssignmentId]
				  ,[CaseNumber]
				  ,[TicketId]
				  ,[AssignedTo]
				  ,[AssignedToEmail]
				  ,[AssignedToADID]
				  --,[AssignedOnUTC]
				  ,FORMAT(SWITCHOFFSET(AssignedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as AssignedOnUTC
				  ,[AssignedBy]
				  ,[AssignedByEmail]
				  ,[AssignedByADID]
				  ,CASE 
						WHEN EAH.[CallActionId] IS NOT NULL THEN CA.CallAction
						ELSE 'Action Pending'
					END AS 'CallAction'
				  ,EAH.[CallStatusId]
				  ,CS.CallStatus
				  ,[ClosedBy]
				  ,[ClosedByEmail]
				  ,[ClosedByADID]
				  --,[ClosedOnUTC]
				  ,FORMAT(SWITCHOFFSET(ClosedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as ClosedOnUTC
				  ,[AdminClosureRemarks]
				  --,[CreatedOnUTC]
				  ,FORMAT(SWITCHOFFSET(CreatedOnUTC, '+05:30'),'yyyy-MM-dd HH:mm:ss') as CreatedOnUTC
		  FROM [dbo].[T_EngineerAssignmentHistory] EAH WITH(NOLOCK)

		  INNER JOIN [dbo].[M_CallStatus] CS WITH(NOLOCK) ON CS.CallStatusId = EAH.CallStatusId

		  LEFT JOIN [dbo].[M_CallAction] CA WITH(NOLOCK) ON CA.CallActionId = EAH.CallActionId

		  WHERE EAH.AssignmentId = @AssignmentId

		END

  END
GO
PRINT N'Altering Procedure [dbo].[usp_T_EngineerAssignment_InsertUpdate]...';


GO
ALTER PROCEDURE [dbo].[usp_T_EngineerAssignment_InsertUpdate]
(
	@TransactionType VARCHAR(10) = NULL,
	@TicketId BIGINT = NULL,
	@AssignmentId BIGINT = 0,
	@CaseNumber VARCHAR(50) = NULL,
    @AssignedTo NVARCHAR(100) = NULL,
    @AssignedToEmail VARCHAR(100) = NULL,
    @AssignedToADID VARCHAR(50) = NULL,
    @AssignedBy NVARCHAR(100) = NULL,
    @AssignedByEmail VARCHAR(100) = NULL,
    @AssignedByADID VARCHAR(50) = NULL,
    @CallActionId INT = NULL,
    @CallStatusId INT = NULL,
    @ClosedBy VARCHAR(100) = NULL,
    @ClosedByEmail VARCHAR(100) = NULL,
    @ClosedByADID VARCHAR(100) = NULL,
    @AdminClosureRemarks NVARCHAR(MAX) = NULL
)
AS
BEGIN
	
	DECLARE @AssignmentHistoryId BIGINT = 0;
	DECLARE @SuccessMsg VARCHAR(100);
	DECLARE @ErrorMsg VARCHAR(100);


	IF(@TransactionType = 'ENG-I')
	BEGIN
	BEGIN TRY
	-----------------

	IF EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.CaseNumber = @CaseNumber AND A.CallStatusId <> 3)
	BEGIN
		SET @ErrorMsg = 'DB execution failed - CaseNumber already assigned'
		SELECT
			@ErrorMsg												AS [Message],
			''														AS ErrorMessage,
			0					                                    AS [Status],
			@AssignmentId				                            AS Id
			RETURN
	END

	BEGIN TRANSACTION
	-----------------

		INSERT INTO dbo.[T_EngineerAssignment]
		(
			CaseNumber,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallStatusId,
			CreatedOnUTC
		)
		VALUES
		(
			@CaseNumber,
			@TicketId,
			@AssignedTo,
			@AssignedToEmail,
			@AssignedToADID,
			GETUTCDATE(),
			@AssignedBy,
			@AssignedByEmail,
			@AssignedByADID,
			1,
			GETUTCDATE()
		);

		SET @AssignmentId = @@IDENTITY;

		IF(@AssignmentId > 0)
		BEGIN

			INSERT INTO dbo.[T_EngineerAssignmentHistory]
			(
				AssignmentId,
				TicketId,
				AssignedTo,
				AssignedToEmail,
				AssignedToADID,
				AssignedOnUTC,
				AssignedBy,
				AssignedByEmail,
				AssignedByADID,
				CallActionId,
				CallStatusId,
				ClosedBy,
				ClosedByEmail,
				ClosedByADID,
				AdminClosureRemarks,
				CreatedOnUTC,
				CaseNumber
			)
			SELECT
				A.AssignmentId,
				A.TicketId,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				A.AssignedOnUTC,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.CallActionId,
				A.CallStatusId,
				A.ClosedBy,
				A.ClosedByEmail,
				A.ClosedByADID,
				A.AdminClosureRemarks,
				GETUTCDATE(),
				A.CaseNumber
			FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
			WHERE A.AssignmentId = @AssignmentId

			SET @AssignmentHistoryId = @@IDENTITY;


			UPDATE dbo.[T_TicketDetails] SET TicketId = @TicketId WHERE CaseNumber = @CaseNumber;


			SET @SuccessMsg = 'DB execution successful - EngineerAssignment inserted';

		END		

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Insert EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END

	--------------------------------------------------------------------------------

	IF(@TransactionType = 'ENG-U')
	BEGIN
	BEGIN TRY
	-----------------

		IF NOT EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.AssignmentId = @AssignmentId)
		BEGIN
			SET @ErrorMsg = 'DB execution failed - AssignmentId does not exists'
			SELECT
				@ErrorMsg												AS [Message],
				''														AS ErrorMessage,
				0					                                    AS [Status],
				@AssignmentId				                            AS Id
				RETURN
		END

	BEGIN TRANSACTION
	-----------------

		UPDATE dbo.[T_EngineerAssignment]
		SET AssignedTo = ISNULL(@AssignedTo, AssignedTo),
		AssignedToEmail = ISNULL(@AssignedToEmail, AssignedToEmail),
		AssignedToADID = ISNULL(@AssignedToADID, AssignedToADID),
		AssignedOnUTC = GETUTCDATE(),
		AssignedBy = ISNULL(@AssignedBy, AssignedBy),
		AssignedByEmail = ISNULL(@AssignedByEmail, AssignedByEmail),
		AssignedByADID = ISNULL(@AssignedByADID, AssignedByADID)
		WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber AND CallStatusId <> 3


		INSERT INTO dbo.[T_EngineerAssignmentHistory]
		(
			AssignmentId,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallActionId,
			CallStatusId,
			ClosedBy,
			ClosedByEmail,
			ClosedByADID,
			AdminClosureRemarks,
			CreatedOnUTC,
			CaseNumber
		)
		SELECT
			A.AssignmentId,
			A.TicketId,
			A.AssignedTo,
			A.AssignedToEmail,
			A.AssignedToADID,
			A.AssignedOnUTC,
			A.AssignedBy,
			A.AssignedByEmail,
			A.AssignedByADID,
			A.CallActionId,
			A.CallStatusId,
			A.ClosedBy,
			A.ClosedByEmail,
			A.ClosedByADID,
			A.AdminClosureRemarks,
			GETUTCDATE(),
			A.CaseNumber
		FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
		WHERE A.AssignmentId = @AssignmentId

		
		SET @SuccessMsg = 'DB execution successful - EngineerAssignment updated';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Update EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END
	
	--------------------------------------------------------------------------------

	IF(@TransactionType = 'ADMIN-U')
	BEGIN
	BEGIN TRY
	-----------------

		IF NOT EXISTS (SELECT * FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK) WHERE A.AssignmentId = @AssignmentId)
		BEGIN
			SET @ErrorMsg = 'DB execution failed - AssignmentId does not exists'
			SELECT
				@ErrorMsg												AS [Message],
				''														AS ErrorMessage,
				0					                                    AS [Status],
				@AssignmentId				                            AS Id
				RETURN
		END

	BEGIN TRANSACTION
	-----------------

		UPDATE dbo.[T_EngineerAssignment]
		SET CallStatusId = ISNULL(@CallStatusId, CallStatusId),
		AdminClosureRemarks = ISNULL(@AdminClosureRemarks, AdminClosureRemarks)
		WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;

		--IF(@CallActionId = 1 AND @CallStatusId = 3)
		IF(@CallStatusId = 3)
		BEGIN

			UPDATE dbo.[T_EngineerAssignment]
			SET ClosedBy = ISNULL(@ClosedBy, ClosedBy),
			ClosedByEmail = ISNULL(@ClosedByEmail, ClosedByEmail),
			ClosedByADID = ISNULL(@ClosedByADID, ClosedByADID),
			ClosedOnUTC = GETUTCDATE()
			WHERE AssignmentId = @AssignmentId AND CaseNumber = @CaseNumber;

		END
		
		SET @SuccessMsg = 'DB execution successful - EngineerAssignment updated by Admin';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
	ROLLBACK TRANSACTION
	SET @ErrorMsg = 'DB execution failed - Admin Update EngineerAssignment'
    SELECT
        @ErrorMsg												AS [Message],
        ERROR_MESSAGE()		                                    AS ErrorMessage,
        0					                                    AS [Status],
        ''				                                        AS Id
        RETURN
	END CATCH
	-----------------
	END


	COMMIT TRANSACTION
	-----------------
	SELECT
		@SuccessMsg												AS [Message],
		''						                                AS ErrorMessage,
		1					                                    AS [Status],
		@AssignmentId											AS Id,
		@CaseNumber												AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_TicketInBulk_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_TicketInBulk_Insert]
(
	@udt_TicketDetailsList dbo.[udt_T_TicketDetails] READONLY
)
AS
BEGIN

	DECLARE @SuccessMsg VARCHAR(100);
	DECLARE @ErrorMsg VARCHAR(100);

	DECLARE @DuplicateTicketIds VARCHAR(MAX) = NULL;

	DECLARE @DuplicateTicketTbl AS TABLE
	(
		CaseNumber VARCHAR(50) NULL
	)

	INSERT INTO @DuplicateTicketTbl SELECT udt.CaseNumber FROM @udt_TicketDetailsList udt WHERE udt.CaseNumber IN (SELECT TD.CaseNumber FROM dbo.[T_TicketDetails] TD WITH(NOLOCK));

	IF EXISTS (SELECT * FROM @DuplicateTicketTbl)
	BEGIN
		
		;WITH CTE AS
        (
			SELECT CaseNumber
			FROM @DuplicateTicketTbl
        )
        SELECT @DuplicateTicketIds = CONCAT(@DuplicateTicketIds,',',CaseNumber) FROM CTE

		SET @DuplicateTicketIds = 'Following ticket id(s) already exist in the database: ' + @DuplicateTicketIds;

	END

	BEGIN TRY
	-----------------

		BEGIN TRANSACTION
		-----------------

		-- INSERT TICKETS
		INSERT INTO [dbo].[T_TicketDetails] 
		(
			[CaseNumber],
			[TicketId],
			--[FromEmail],
			--[ToEmail],
			[CaseSubject],
			--[WorkOrderNumber],
			--[ServiceAccount],
			[ContactName],
			[ContactEmail],
			--[ContactPhone],
			--[ServiceDeliveryStreetAddress],
			--[ServiceDeliveryCity],
			--[ServiceDeliveryCountry],
			--[PostalCode],
			[SerialNumber],
			[ProductName],
			[ProductNumber],
			--[OTCCode],
			--[PartNumber],
			--[PartDescription],
			--[EmailSubject],
			--[EmailDate],
			[CreatedOn],
			--[PartNumber2],
			--[PartDescription2],
			--[PartNumber3],
			--[PartDescription3]
			[TicketType]
		)
		SELECT
			udt.CaseNumber,
			udt.TicketId,
			udt.CaseSubject,
			udt.ContactName,
			udt.ContactEmail,
			udt.SerialNumber,
			udt.ProductName,
			udt.ProductNumber,
			SWITCHOFFSET((CONVERT(DATETIME, udt.CreatedOn, 103)), '-05:30'),
			udt.TicketType
		FROM @udt_TicketDetailsList udt WHERE udt.CaseNumber NOT IN (SELECT CaseNumber FROM @DuplicateTicketTbl)

		SET @SuccessMsg = 'DB execution successful - Ticket(s) inserted from CSV';

		-- ASSIGN ENGINEERS
		INSERT INTO dbo.[T_EngineerAssignment]
		(
			CaseNumber,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallStatusId,
			CreatedOnUTC
		)
		SELECT
			udt.CaseNumber,
			udt.TicketId,
			udt.AssignedTo,
			udt.AssignedToEmail,
			udt.AssignedToADID,
			GETUTCDATE(),
			udt.AssignedBy,
			udt.AssignedByEmail,
			udt.AssignedByADID,
			1,
			GETUTCDATE()
		FROM @udt_TicketDetailsList udt
		INNER JOIN dbo.[T_TicketDetails] TD ON TD.CaseNumber = udt.CaseNumber
		WHERE udt.CaseNumber = TD.CaseNumber;

		SET @SuccessMsg = @SuccessMsg + ' & Assigned to engineer(s)';

		INSERT INTO dbo.[T_EngineerAssignmentHistory]
			(
				AssignmentId,
				TicketId,
				AssignedTo,
				AssignedToEmail,
				AssignedToADID,
				AssignedOnUTC,
				AssignedBy,
				AssignedByEmail,
				AssignedByADID,
				CallActionId,
				CallStatusId,
				ClosedBy,
				ClosedByEmail,
				ClosedByADID,
				AdminClosureRemarks,
				CreatedOnUTC,
				CaseNumber
			)
			SELECT
				A.AssignmentId,
				A.TicketId,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				A.AssignedOnUTC,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.CallActionId,
				A.CallStatusId,
				A.ClosedBy,
				A.ClosedByEmail,
				A.ClosedByADID,
				A.AdminClosureRemarks,
				GETUTCDATE(),
				A.CaseNumber
			FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
			INNER JOIN @udt_TicketDetailsList udt ON udt.CaseNumber = A.CaseNumber
			WHERE A.CaseNumber = udt.CaseNumber;

		SET @SuccessMsg = @SuccessMsg + ' & updated Assignment History';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
		
		ROLLBACK TRANSACTION
		SET @ErrorMsg = 'DB execution failed - Insert ticket(s) from CSV'
		SELECT
		@ErrorMsg												AS [Message],
		ERROR_MESSAGE()		                                    AS ErrorMessage,
		0					                                    AS [Status],
		''				                                        AS Id
		RETURN

	END CATCH
	-----------------

	COMMIT TRANSACTION
	-----------------
	SELECT
		@SuccessMsg												AS [Message],
		''						                                AS ErrorMessage,
		1					                                    AS [Status],
		@@IDENTITY												AS Id,
		@DuplicateTicketIds										AS ReferenceNo

END
GO
PRINT N'Refreshing Procedure [dbo].[usp_T_CallDetails_InsertUpdate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_T_CallDetails_InsertUpdate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_T_Ticket_ByCaseNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_T_Ticket_ByCaseNumber]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_T_TicketTimeline_ByCaseNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_T_TicketTimeline_ByCaseNumber]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_T_EngineerAssignmentHistory_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_T_EngineerAssignmentHistory_Get]';


GO
PRINT N'Update complete.';


GO
