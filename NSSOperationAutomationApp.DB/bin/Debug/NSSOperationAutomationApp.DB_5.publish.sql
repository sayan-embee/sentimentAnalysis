/*
Deployment script for NSSOperationAutomationP1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NSSOperationAutomationP1"
:setvar DefaultFilePrefix "NSSOperationAutomationP1"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL16.MSSQLSERVER01\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_TicketInBulk_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_TicketInBulk_Insert]
(
	@udt_TicketDetailsList dbo.[udt_T_TicketDetails] READONLY
)
AS
BEGIN

	DECLARE @SuccessMsg VARCHAR(100);
	DECLARE @ErrorMsg VARCHAR(100);

	DECLARE @DuplicateTicketIds VARCHAR(MAX) = NULL;

	DECLARE @DuplicateTicketTbl AS TABLE
	(
		CaseNumber VARCHAR(50) NULL
	)

	INSERT INTO @DuplicateTicketTbl SELECT udt.CaseNumber FROM @udt_TicketDetailsList udt WHERE udt.CaseNumber IN (SELECT TD.CaseNumber FROM dbo.[T_TicketDetails] TD WITH(NOLOCK));

	IF EXISTS (SELECT * FROM @DuplicateTicketTbl)
	BEGIN
		
		;WITH CTE AS
        (
			SELECT CaseNumber
			FROM @DuplicateTicketTbl
        )
        SELECT @DuplicateTicketIds = CONCAT(@DuplicateTicketIds,',',CaseNumber) FROM CTE

		SET @DuplicateTicketIds = 'Following ticket id(s) already exist in the database: ' + @DuplicateTicketIds;

	END

	BEGIN TRY
	-----------------

		BEGIN TRANSACTION
		-----------------

		-- INSERT TICKETS
		INSERT INTO [dbo].[T_TicketDetails] 
		(
			[CaseNumber],
			[TicketId],
			--[FromEmail],
			--[ToEmail],
			[CaseSubject],
			--[WorkOrderNumber],
			--[ServiceAccount],
			[ContactName],
			[ContactEmail],
			--[ContactPhone],
			--[ServiceDeliveryStreetAddress],
			--[ServiceDeliveryCity],
			--[ServiceDeliveryCountry],
			--[PostalCode],
			[SerialNumber],
			[ProductName],
			[ProductNumber],
			--[OTCCode],
			--[PartNumber],
			--[PartDescription],
			--[EmailSubject],
			--[EmailDate],
			[CreatedOn],
			--[PartNumber2],
			--[PartDescription2],
			--[PartNumber3],
			--[PartDescription3]
			[TicketType]
		)
		SELECT
			udt.CaseNumber,
			udt.TicketId,
			udt.CaseSubject,
			udt.ContactName,
			udt.ContactEmail,
			udt.SerialNumber,
			udt.ProductName,
			udt.ProductNumber,
			SWITCHOFFSET((CONVERT(DATETIME, udt.CreatedOn, 103)), '-05:30'),
			udt.TicketType
		FROM @udt_TicketDetailsList udt WHERE udt.CaseNumber NOT IN (SELECT CaseNumber FROM @DuplicateTicketTbl)

		SET @SuccessMsg = 'DB execution successful - Ticket(s) inserted from CSV';

		-- ASSIGN ENGINEERS
		INSERT INTO dbo.[T_EngineerAssignment]
		(
			CaseNumber,
			TicketId,
			AssignedTo,
			AssignedToEmail,
			AssignedToADID,
			AssignedOnUTC,
			AssignedBy,
			AssignedByEmail,
			AssignedByADID,
			CallStatusId,
			CreatedOnUTC
		)
		SELECT
			udt.CaseNumber,
			udt.TicketId,
			udt.AssignedTo,
			udt.AssignedToEmail,
			udt.AssignedToADID,
			GETUTCDATE(),
			udt.AssignedBy,
			udt.AssignedByEmail,
			udt.AssignedByADID,
			1,
			GETUTCDATE()
		FROM @udt_TicketDetailsList udt
		INNER JOIN dbo.[T_TicketDetails] TD ON TD.CaseNumber = udt.CaseNumber
		WHERE udt.CaseNumber = TD.CaseNumber;

		SET @SuccessMsg = @SuccessMsg + ' & Assigned to engineer(s)';

		INSERT INTO dbo.[T_EngineerAssignmentHistory]
			(
				AssignmentId,
				TicketId,
				AssignedTo,
				AssignedToEmail,
				AssignedToADID,
				AssignedOnUTC,
				AssignedBy,
				AssignedByEmail,
				AssignedByADID,
				CallActionId,
				CallStatusId,
				ClosedBy,
				ClosedByEmail,
				ClosedByADID,
				AdminClosureRemarks,
				CreatedOnUTC,
				CaseNumber
			)
			SELECT
				A.AssignmentId,
				A.TicketId,
				A.AssignedTo,
				A.AssignedToEmail,
				A.AssignedToADID,
				A.AssignedOnUTC,
				A.AssignedBy,
				A.AssignedByEmail,
				A.AssignedByADID,
				A.CallActionId,
				A.CallStatusId,
				A.ClosedBy,
				A.ClosedByEmail,
				A.ClosedByADID,
				A.AdminClosureRemarks,
				GETUTCDATE(),
				A.CaseNumber
			FROM dbo.[T_EngineerAssignment] A WITH(NOLOCK)
			INNER JOIN @udt_TicketDetailsList udt ON udt.CaseNumber = A.CaseNumber
			WHERE A.CaseNumber = udt.CaseNumber;

		SET @SuccessMsg = @SuccessMsg + ' & updated Assignment History';

	END TRY
	-----------------
	BEGIN CATCH
	-----------------
		
		ROLLBACK TRANSACTION
		SET @ErrorMsg = 'DB execution failed - Insert ticket(s) from CSV'
		SELECT
		@ErrorMsg												AS [Message],
		ERROR_MESSAGE()		                                    AS ErrorMessage,
		0					                                    AS [Status],
		''				                                        AS Id
		RETURN

	END CATCH
	-----------------

	COMMIT TRANSACTION
	-----------------
	SELECT
		@SuccessMsg												AS [Message],
		''						                                AS ErrorMessage,
		1					                                    AS [Status],
		@@IDENTITY												AS Id,
		@DuplicateTicketIds										AS ReferenceNo

END
GO
PRINT N'Update complete.';


GO
